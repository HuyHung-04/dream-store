package com.example.dreambackend.services.nhanvien;

import com.example.dreambackend.entities.NhanVien;
import com.example.dreambackend.entities.VaiTro;
import com.example.dreambackend.repositories.NhanVienRepository;
import com.example.dreambackend.repositories.VaiTroRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.Random;

@Service
public class NhanVienService implements INhanVienService {
    @Autowired
    private NhanVienRepository nhanVienRepository;
    @Autowired
    private VaiTroRepository vaiTroRepository;
    @Transactional
    @Override
    public Page<NhanVien> getAllNhanVienPaged(int page, int size) {
        return nhanVienRepository.findAll(PageRequest.of(page, size));
    }
    @Transactional
    @Override
    public NhanVien addNhanVien(NhanVien nhanVien) {
        VaiTro vaiTro = vaiTroRepository.findByTen("Nh√¢n vi√™n")
                .orElseThrow(() -> new IllegalArgumentException("Vai tr√≤ Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i!"));
        // G√°n vai tr√≤ cho nh√¢n vi√™n
        nhanVien.setVaiTro(vaiTro);
        nhanVien.setMa(taoMaNhanVien());
        // G√°n ng√†y t·∫°o hi·ªán t·∫°i
        nhanVien.setNgayTao(LocalDate.now());
        return nhanVienRepository.save(nhanVien);
    }
    // ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c l∆∞u tr·ªØ ·∫£nh
    private static final String UPLOAD_DIR = "D:/dream-store/dream-backend/uploads/images/";
    // C·∫≠p nh·∫≠t ho·∫∑c th√™m ·∫£nh cho nh√¢n vi√™n
    @Transactional
    @Override
    public NhanVien addImageForNhanVien(Integer nhanVienId, MultipartFile file) throws IOException {
        NhanVien existingNhanVien = nhanVienRepository.findById(nhanVienId)
                .orElseThrow(() -> new IllegalArgumentException("Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i!"));

        if (file != null && !file.isEmpty()) {
            // Ki·ªÉm tra MIME type
            String contentType = file.getContentType();
            String fileExtension = getFileExtension(file.getOriginalFilename());

            if (!isSupportedImageFormat(contentType, fileExtension)) {
                throw new IllegalArgumentException("Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (jpg, jpeg, png, gif, bmp, tiff, heif, avif, webp, jfif)!");
            }

            // L·∫•y t√™n file ·∫£nh
            String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
            Path path = Paths.get(UPLOAD_DIR, fileName);

            // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            Files.createDirectories(path.getParent());

            // L∆∞u ·∫£nh v√†o th∆∞ m·ª•c
            Files.write(path, file.getBytes());

            // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o nh√¢n vi√™n
            existingNhanVien.setAnh(fileName);
        }

        return nhanVienRepository.save(existingNhanVien);
    }

    private String taoMaNhanVien() {
        Random random = new Random();
        String maNhanVien;
        do {
            int soNgauNhien = 1 + random.nextInt(9999); // Sinh s·ªë t·ª´ 1 ƒë·∫øn 9999
            String maSo = String.format("%04d", soNgauNhien); // ƒê·ªãnh d·∫°ng th√†nh 4 ch·ªØ s·ªë
            maNhanVien = "NV" + maSo;
        } while (nhanVienRepository.existsByMa(maNhanVien)); // Ki·ªÉm tra xem m√£ ƒë√£ t·ªìn t·∫°i ch∆∞a
        return maNhanVien;
    }

    // H√†m l·∫•y ph·∫ßn m·ªü r·ªông c·ªßa file
    private String getFileExtension(String fileName) {
        if (fileName != null && fileName.contains(".")) {
            return fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();
        }
        return "";
    }

    // H√†m ki·ªÉm tra ƒë·ªãnh d·∫°ng ·∫£nh ƒë∆∞·ª£c h·ªó tr·ª£
    private boolean isSupportedImageFormat(String contentType, String extension) {
        List<String> supportedExtensions = List.of("jpg", "jpeg", "png", "gif", "bmp", "tiff", "heif", "avif", "webp", "jfif");
        return (contentType != null && contentType.startsWith("image/")) || supportedExtensions.contains(extension);
    }

    @Override
    @Transactional
    public NhanVien updateNhanVien(NhanVien nhanVien) {
        // üîπ Ki·ªÉm tra nh√¢n vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
        NhanVien existingNhanVien = nhanVienRepository.findById(nhanVien.getId())
                .orElseThrow(() -> new IllegalArgumentException("Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i!"));
        // üîπ Ki·ªÉm tra vai tr√≤ c√≥ t·ªìn t·∫°i kh√¥ng
        VaiTro vaiTro = vaiTroRepository.findById(nhanVien.getVaiTro().getId())
                .orElseThrow(() -> new IllegalArgumentException("Vai tr√≤ kh√¥ng t·ªìn t·∫°i!"));
        // üîπ C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n
        existingNhanVien.setTen(nhanVien.getTen());
        existingNhanVien.setGioiTinh(nhanVien.getGioiTinh());
        existingNhanVien.setNgaySinh(nhanVien.getNgaySinh());
        existingNhanVien.setEmail(nhanVien.getEmail());
        existingNhanVien.setSoDienThoai(nhanVien.getSoDienThoai());
        existingNhanVien.setTaiKhoan(nhanVien.getTaiKhoan());
        existingNhanVien.setMatKhau(nhanVien.getMatKhau());
        existingNhanVien.setTrangThai(nhanVien.getTrangThai());
        existingNhanVien.setNgaySua(LocalDate.now());
        // üîπ G√°n vai tr√≤ m·ªõi
        existingNhanVien.setVaiTro(vaiTro);

        return nhanVienRepository.save(existingNhanVien);
    }
    @Override
    public NhanVien getNhanVienById(Integer id) {
        return nhanVienRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i v·ªõi id: " + id));
    }
    @Override
    public List<NhanVien> searchNhanVienByName(String ten) {
        return nhanVienRepository.findByTenContainingIgnoreCase(ten);
    }

    @Override
    public ResponseEntity<?> login(String email, String password) {
        // Ki·ªÉm tra xem nh√¢n vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
        Optional<NhanVien> nhanVienOptional = nhanVienRepository.findByEmail(email);

        if (nhanVienOptional.isPresent()) {
            NhanVien nhanVien = nhanVienOptional.get();

            // Ki·ªÉm tra m·∫≠t kh·∫©u
            if (password.equals(nhanVien.getMatKhau())) {
                // ƒêƒÉng nh·∫≠p th√†nh c√¥ng, tr·∫£ v·ªÅ th√¥ng tin nh√¢n vi√™n
                return ResponseEntity.ok(nhanVien); // Tr·∫£ v·ªÅ th√¥ng tin nh√¢n vi√™n n·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
            } else {
                // M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body("Sai m·∫≠t kh·∫©u."); // Tr·∫£ v·ªÅ l·ªói v·ªõi m√£ HTTP 401 (Unauthorized)
            }
        } else {
            // Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi email n√†y
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("Email kh√¥ng t·ªìn t·∫°i: "); // Tr·∫£ v·ªÅ l·ªói v·ªõi m√£ HTTP 404 (Not Found)
        }
    }
    @Override
    public Page<NhanVien> getNhanVienByTrangThai(Integer trangThai, int page, int size) {
        return nhanVienRepository.findByTrangThai(trangThai, PageRequest.of(page, size));
    }
    @Override
    public Page<NhanVien> getAllNhanVien(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return nhanVienRepository.findAll(pageable);
    }
}