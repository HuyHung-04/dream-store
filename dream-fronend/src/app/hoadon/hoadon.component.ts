import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { HoaDonService, HoaDonSearchRequest, HoaDonResponse } from './hoadon.service';

@Component({
  selector: 'app-hoadon',
  templateUrl: './hoadon.component.html',
  standalone: true,
  imports: [FormsModule, CommonModule],
  styleUrls: ['./hoadon.component.css']
})
export class HoaDonComponent implements OnInit {
  // Y√™u c·∫ßu t√¨m ki·∫øm h√≥a ƒë∆°n
  searchRequest: HoaDonSearchRequest = {
    maHoaDon: '',
    tenKhachHang: '',
    tenNhanVien: '',
    ngayTaoFrom: null,
    ngayTaoTo: null,
    listTrangThai: null, // N·∫øu null => kh√¥ng l·ªçc theo tr·∫°ng th√°i
    pageSize: 6,
    page: 1
  };

  // D·ªØ li·ªáu h√≥a ƒë∆°n d·∫°ng ph√¢n trang (ƒë·ªãnh nghƒ©a inline)
  hoaDons: {
    content: HoaDonResponse[];
    totalElements: number;
    currentPage: number;
    pageSize: number;
    totalPages: number;
  } = {
    content: [],
    totalElements: 0,
    currentPage: 1,
    pageSize: 6,
    totalPages: 1
  };

  // C√°c bi·∫øn cho popup hi·ªÉn th·ªã chi ti·∫øt h√≥a ƒë∆°n
  selectedInvoiceDetail: HoaDonResponse | null = null;
  showDetailPopup: boolean = false;
  chiTietHoaDonData: any[] = [];
  hoaDonData: any = null; // ‚úÖ s·ª≠a l·∫°i ki·ªÉu d·ªØ li·ªáu

  constructor(private hoaDonService: HoaDonService) {}

  ngOnInit(): void {
    this.loadHoaDons();
 
  }

  // Load danh s√°ch h√≥a ƒë∆°n t·ª´ backend
  loadHoaDons(): void {
    this.hoaDonService.getHoaDons(this.searchRequest).subscribe(
      (response: any) => {
        console.log("D·ªØ li·ªáu t·ª´ API:", response);
        if (response && response.data) {
          const totalRecords = response.recordsTotal || 0;
          this.hoaDons = {
            totalPages: Math.ceil(totalRecords / this.searchRequest.pageSize),
            content: response.data,
            totalElements: totalRecords,
            currentPage: this.searchRequest.page,
            pageSize: this.searchRequest.pageSize
          };
        } else {
          console.error("D·ªØ li·ªáu API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:", response);
        }
      },
      error => {
        console.error("L·ªói khi t·∫£i h√≥a ƒë∆°n:", error);
      }
    );
  }


  // H√†m trackBy cho *ngFor (gi√∫p t·ªëi ∆∞u hi·ªÉn th·ªã danh s√°ch)
  trackById(index: number, invoice: HoaDonResponse): number {
    return invoice.id;
  }

  // H√†m t√¨m ki·∫øm h√≥a ƒë∆°n: reset trang hi·ªán t·∫°i v·ªÅ 1 v√† load l·∫°i d·ªØ li·ªáu
  search(): void {
    this.searchRequest.page = 1;
    this.loadHoaDons();
  }

  // H√†m reset b·ªô l·ªçc t√¨m ki·∫øm
  resetFilters(): void {
    this.searchRequest = {
      maHoaDon: '',
      tenKhachHang: '',
      tenNhanVien: '',
      ngayTaoFrom: null,
      ngayTaoTo: null,
      listTrangThai: null,
      pageSize: 6,
      page: 1
    };
    this.loadHoaDons();
  }

 // T√≠nh t·ªïng s·ªë trang d·ª±a tr√™n `totalElements` v√† `pageSize`
calculateTotalPages(): void {
  this.hoaDons.totalPages = Math.ceil(this.hoaDons.totalElements / this.hoaDons.pageSize);
}

// Chuy·ªÉn trang: Prev
prevPage(): void {
  if (this.searchRequest.page > 1) {
    this.searchRequest.page--;
    this.loadHoaDons();
  }
}

// Chuy·ªÉn trang: Next
nextPage(): void {
  if (this.searchRequest.page < this.hoaDons.totalPages) {
    this.searchRequest.page++;
    this.loadHoaDons();
  }
}

selectHoaDonChiTiet(invoice: HoaDonResponse): void {
  const maHoaDon = invoice.maHoaDon;
  console.log("üîç M√£ h√≥a ƒë∆°n:", maHoaDon);
  // G·ªçi API l·∫•y chi ti·∫øt s·∫£n ph·∫©m trong h√≥a ƒë∆°n
  this.hoaDonService.getChiTietHoaDon(maHoaDon).subscribe({
    next: (res) => {
      this.chiTietHoaDonData = res;
      console.log("üì¶ Chi ti·∫øt s·∫£n ph·∫©m:", res);
      
    },
    error: (err) => {
      console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt h√≥a ƒë∆°n:", err);
    }
  });

  // G·ªçi API l·∫•y l·∫°i th√¥ng tin h√≥a ƒë∆°n m·ªõi nh·∫•t t·ª´ server
  this.hoaDonService.getHoaDonByMa(maHoaDon).subscribe({
    next: (res) => {
      this.hoaDonData = res;
      this.showDetailPopup = true;
      console.log("‚ÑπÔ∏è H√≥a ƒë∆°n chi ti·∫øt:", res);
    },
    error: (err) => {
      console.error("‚ùå L·ªói khi l·∫•y h√≥a ƒë∆°n theo m√£:", err);
    }
  });
  
}

  // H√†m ƒë√≥ng popup chi ti·∫øt h√≥a ƒë∆°n
  closePopup(): void {
    this.showDetailPopup = false;
    this.selectedInvoiceDetail = null;
  }

  // Danh s√°ch c√°c tr·∫°ng th√°i c√≥ th·ªÉ chuy·ªÉn (tu·∫ßn t·ª±)
trangThaiChuyenTiep: number[] = [1, 2, 3, 4];

getTrangThaiText(trangThai: number): string {
  switch (trangThai) {
    case 1: return 'Ch·ªù x√°c nh·∫≠n';
    case 2: return 'ƒê√£ x√°c nh·∫≠n';
    case 3: return 'ƒêang giao h√†ng';
    case 4: return 'Giao h√†ng ho√†n t·∫•t';
    case 5: return 'H·ªßy ƒë∆°n';
    case 6: return 'Ch·ªù thanh to√°n';
    default: return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
}

isTrangThaiCoTheChuyen(trangThai: number): boolean {
  return this.trangThaiChuyenTiep.includes(trangThai);
}

doiTrangThai(invoice: HoaDonResponse): void {
  const id = invoice.id;
  const currentTrangThai = invoice.trangThai;
  const index = this.trangThaiChuyenTiep.indexOf(currentTrangThai);
  if (index >= 0 && index < this.trangThaiChuyenTiep.length - 1) {
    const newTrangThai = this.trangThaiChuyenTiep[index + 1];
    this.hoaDonService.capNhatTrangThai(id).subscribe(
      (response) => {
        invoice.trangThai = response.trangThai; // c·∫≠p nh·∫≠t tr·ª±c ti·∫øp trong b·∫£ng
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n ${id} sang: ${this.getTrangThaiText(newTrangThai)}`);
      },
      (err) => {
        console.error(" L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      }
    );
  }
}

// Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω n√∫t "Quay V·ªÅ Trang Ch·ªß"
goHome(): void {
this.showDetailPopup=false
}
}
