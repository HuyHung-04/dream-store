import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import Chart from 'chart.js/auto';
import {
  ThongKeService, ThongKeResponse, ThongKeThangResponse, ThongKeThangNayResponse,
  ThongKeHomNayResponse, TopSanPhamResponse
} from './thongke.service';

@Component({
  selector: 'app-thongke',
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule],
  templateUrl: './thongke.component.html',
  styleUrls: ['./thongke.component.css'],
})
export class ThongkeComponent implements OnInit {
  thongKeData: ThongKeResponse | null = null;
  selectedType: string = 'NƒÉm nay';
  chart: any;
  pieChart: any;
  topSanPhamData: TopSanPhamResponse[] = [];
  page: number = 0;
  size: number = 3;
  selectedMonth: number = new Date().getMonth() + 1;
  selectedYear: number = new Date().getFullYear();
  months: { value: number, label: string }[] = [
    { value: 0, label: 'Ch·ªçn th√°ng' },
    ...Array.from({ length: 12 }, (_, i) => ({
      value: i + 1,
      label: `Th√°ng ${i + 1}`
    }))
  ];
  
  years: number[] = [];
  topProductMonth: number = new Date().getMonth() + 1;
  topProductYear: number = new Date().getFullYear();
  isMonthDisabled: boolean = true;

  constructor(private thongKeService: ThongKeService) { }

  ngOnInit(): void {
    this.isMonthDisabled = true;
    this.loadThongKe(this.selectedType);
    this.loadTopSanPhamThangNay();
    this.onMonthChange()
  }

  loadThongKe(type: string): void {
    this.loadBieuDoNam()
    this.selectedType = type;
    this.thongKeData = null;
    this.destroyChart();

    // üëâ ƒê·∫∑t l·∫°i th√°ng v√† nƒÉm hi·ªán t·∫°i
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();

    // N·∫øu l√† "H√¥m nay" ho·∫∑c "T·∫•t c·∫£" th√¨ reset gi√° tr·ªã v√† c·∫≠p nh·∫≠t v√†o combobox
    if (type === 'H√¥m nay' || type === 'T·∫•t c·∫£') {
      this.selectedMonth = currentMonth;
      this.selectedYear = currentYear;
    }

    // G·ªçi API t∆∞∆°ng ·ª©ng
    if (type === 'H√¥m nay') {
      this.thongKeService.thongKeTongQuan(type).subscribe(data => {
        this.thongKeData = data;
        this.loadBieuDoHomNay();
      });
    } else if (type === 'T·∫•t c·∫£') {
      this.thongKeService.thongKeTongQuan(type).subscribe(data => {
        this.thongKeData = data;
        this.loadBieuDoNam();
      });
    } else {
      // N·∫øu l√† "Theo th√°ng/nƒÉm" th√¨ load theo th√°ng
      this.onMonthChange();
    }
  }

  onMonthChange(): void {
    this.selectedType = '';
    if (this.selectedType === 'H√¥m nay' || this.selectedMonth === 0) {
      this.destroyChart();
      return;
    }

    // G·ªçi d·ªØ li·ªáu t·ªïng quan theo th√°ng v√† nƒÉm
    this.thongKeService.getThongKeTongQuan(this.selectedMonth, this.selectedYear).subscribe(
      (data: ThongKeResponse) => {
        this.thongKeData = data;
      },
      (error) => {
        console.error('L·ªói khi l·∫•y th·ªëng k√™ t·ªïng quan theo th√°ng v√† nƒÉm:', error);
      }
    );

    // G·ªçi d·ªØ li·ªáu bi·ªÉu ƒë·ªì doanh thu t·ª´ng ng√†y
    this.thongKeService.thongKeTungNgayTrongThang(this.selectedMonth, this.selectedYear).subscribe(
      (data: ThongKeThangNayResponse[]) => {
        if (!data || data.length === 0 || !data.some(item => item.tongDoanhThu > 0)) {
          this.destroyChart();
          return;
        }
        const labels = data.map((item) => `Ng√†y ${item.ngay}`);
        const values = data.map((item) => item.tongDoanhThu);
        this.renderChart(labels, values, 'Doanh thu t·ª´ng ng√†y trong th√°ng');
      },
      (error) => {
        
        this.thongKeData = {
          soHoaDon: 0,
          tongDoanhThu: 0,
          soKhachHang: 0
        };
        console.log("tk",this.thongKeData)
        this.destroyChart();
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu doanh thu ng√†y trong th√°ng:', error);
      }
    );
  }


  onYearChange(): void {
    this.selectedType = '';
    this.selectedMonth = 0; 
    this.isMonthDisabled = false;
    this.thongKeService.thongKeTungThangNam(this.selectedYear).subscribe(
      (data: ThongKeThangResponse[]) => {
        console.log(data)
        if (!data || data.length === 0 || !data.some(item => item.tongDoanhThu > 0)) {
          console.log('Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu theo th√°ng.');
          this.destroyChart();
          return;
        }
        const labels: string[] = [];
        const values: number[] = new Array(12).fill(0); // M·∫∑c ƒë·ªãnh 12 th√°ng c√≥ gi√° tr·ªã 0

        data.forEach((item) => {
          values[item.thang - 1] = item.tongDoanhThu; // G√°n doanh thu v√†o ƒë√∫ng th√°ng
        });

        for (let i = 1; i <= 12; i++) {
          labels.push(`Th√°ng ${i}`);
        }

        this.renderChart(labels, values, 'Doanh thu t·ª´ng th√°ng');
      },
      (error) => {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ng th√°ng:', error);
      }
    );

    // L·∫•y th·ªëng k√™ t·ªïng quan theo th√°ng 1 v√† nƒÉm m·ªõi ch·ªçn (t√πy nhu c·∫ßu)
    this.thongKeService.getThongKeTongQuan(0, this.selectedYear).subscribe(
      (data: ThongKeResponse) => {
        this.thongKeData = data;
        console.log("nƒÉm", this.thongKeData)
      },
      (error) => {
        console.error('L·ªói khi l·∫•y th·ªëng k√™ t·ªïng quan theo nƒÉm:', error);
      }
    );

  }

  // Bi·ªÉu ƒë·ªì doanh thu h√¥m nay
  loadBieuDoHomNay(): void {
    this.thongKeService.thongKeHomNay().subscribe(
      (data: ThongKeHomNayResponse) => {
        // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu r·ªóng ho·∫∑c doanh thu l√† 0 th√¨ ·∫©n bi·ªÉu ƒë·ªì
        if (!data || data.tongDoanhThu === 0) {
          console.log('Kh√¥ng c√≥ doanh thu h√¥m nay, x√≥a bi·ªÉu ƒë·ªì.');
          this.destroyChart();
          return;
        }

        const labels = ['Ng√†y h√¥m nay'];
        const values = [data.tongDoanhThu];

        this.renderChart(labels, values, 'Doanh thu h√¥m nay');
      },
      (error) => {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu doanh thu h√¥m nay:', error);
      }
    );
  }


  // Bi·ªÉu ƒë·ªì doanh thu theo nƒÉm
  loadBieuDoNam(): void {
    this.thongKeService.thongKeTungNam().subscribe(
      (data: ThongKeThangResponse[]) => {
        if (!data || data.length === 0 || !data.some(item => item.tongDoanhThu > 0)) {
          console.log('Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu theo nƒÉm.');
          this.destroyChart();
          return;
        }
        const labels = data.map((item) => `NƒÉm ${item.thang}`);
        const values = data.map((item) => item.tongDoanhThu);
        // C·∫≠p nh·∫≠t danh s√°ch nƒÉm (c√°c nƒÉm c√≥ d·ªØ li·ªáu)
        this.years = Array.from(new Set(data.map(item => item.thang)));
        this.renderChart(labels, values, 'Doanh thu t·ª´ng nƒÉm');
      },
      (error) => {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ng nƒÉm:', error);
      }
    );
  }

  // V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
  renderChart(labels: string[], data: number[], label: string): void {
    this.destroyChart();

    // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ gi√° tr·ªã trong `data` ƒë·ªÅu l√† 0 th√¨ kh√¥ng v·∫Ω bi·ªÉu ƒë·ªì
    if (!data.some(value => value > 0)) {
      console.log('Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.');
      return;
    }

    const ctx = document.getElementById('chart') as HTMLCanvasElement;
    if (!ctx) {
      console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ canvas cho bi·ªÉu ƒë·ªì.');
      return;
    }

    this.chart = new Chart(ctx, {
      type: 'bar', // Bi·ªÉu ƒë·ªì c·ªôt
      data: {
        labels: labels,
        datasets: [
          {
            label: label,
            data: data,
            backgroundColor: 'rgba(54, 162, 235, 0.6)', // M√†u xanh d∆∞∆°ng
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true, // Lu√¥n b·∫Øt ƒë·∫ßu t·ª´ 0
          },
        },
        plugins: {
          legend: {
            display: true,
          },
        },
      },
    });
  }

  // X√≥a bi·ªÉu ƒë·ªì c≈© tr∆∞·ªõc khi v·∫Ω m·ªõi
  destroyChart(): void {
    if (this.chart) {
      this.chart.destroy();
      this.chart = null;
    }
  }
  // T·∫£i danh s√°ch top s·∫£n ph·∫©m b√°n ch·∫°y h√¥m nay
  loadTopSanPhamHomNay(): void {
    // Reset th√°ng v√† nƒÉm v·ªÅ hi·ªán t·∫°i
    this.topProductMonth = new Date().getMonth() + 1;
    this.topProductYear = new Date().getFullYear();
    this.thongKeService.topSanPhamHomNay(this.page, this.size).subscribe(
      (data: TopSanPhamResponse[]) => {
        this.topSanPhamData = data;
        this.renderPieChart();
      },
      (error) => {
        console.error('L·ªói khi l·∫•y danh s√°ch top s·∫£n ph·∫©m h√¥m nay:', error);
      }
    );
  }
  // T·∫£i danh s√°ch top s·∫£n ph·∫©m b√°n ch·∫°y trong th√°ng n√†y
  loadTopSanPhamThangNay(): void {
    this.thongKeService.topSanPhamTheoThangVaNam(this.topProductMonth, this.topProductYear, this.page, this.size).subscribe(
      (data: TopSanPhamResponse[]) => {
        this.topSanPhamData = data;
        this.renderPieChart();
      },
      (error) => {
        console.error('L·ªói khi l·∫•y danh s√°ch top s·∫£n ph·∫©m th√°ng n√†y:', error);
      }
    );
  }

  // T·∫£i danh s√°ch top s·∫£n ph·∫©m b√°n ch·∫°y trong nƒÉm nay
  loadTopSanPhamNamNay(): void {
    this.topProductMonth=0
    this.thongKeService.topSanPhamTheoNam(this.topProductYear, this.page, this.size).subscribe(
      (data: TopSanPhamResponse[]) => {
        this.topSanPhamData = data;
        this.renderPieChart();
      },
      (error) => {
        console.error('L·ªói khi l·∫•y danh s√°ch top s·∫£n ph·∫©m nƒÉm nay:', error);
      }
    );
  }

  // T·∫£i danh s√°ch top s·∫£n ph·∫©m b√°n ch·∫°y t·∫•t c·∫£ th·ªùi gian
  loadTopSanPhamTatCa(): void {
    // Reset th√°ng v√† nƒÉm v·ªÅ hi·ªán t·∫°i
    this.topProductMonth = new Date().getMonth() + 1;
    this.topProductYear = new Date().getFullYear();
    this.thongKeService.topSanPhamTatCa(this.page, this.size).subscribe(
      (data: TopSanPhamResponse[]) => {
        this.topSanPhamData = data;
        this.renderPieChart();
      },
      (error) => {
        console.error('L·ªói khi l·∫•y danh s√°ch top s·∫£n ph·∫©m t·∫•t c·∫£ th·ªùi gian:', error);
      }
    );
  }
  renderPieChart(): void {
    if (typeof document === 'undefined') {
      console.warn('Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì v√¨ document kh√¥ng t·ªìn t·∫°i.');
      return;
    }

    const topProducts = this.topSanPhamData.slice(0, 5); // L·∫•y 5 s·∫£n ph·∫©m ƒë·∫ßu ti√™n
    const otherProducts = this.topSanPhamData.slice(5);  // T·∫•t c·∫£ s·∫£n ph·∫©m c√≤n l·∫°i

    const labels = topProducts.map(product => product.tenSanPham);
    const data = topProducts.map(product => product.tongSoLuong);

    // Ki·ªÉm tra n·∫øu c√≥ s·∫£n ph·∫©m c√≤n l·∫°i th√¨ m·ªõi th√™m v√†o bi·ªÉu ƒë·ªì
    if (otherProducts.length > 0) {
      labels.push('C√°c s·∫£n ph·∫©m kh√°c');
      data.push(otherProducts.reduce((sum, product) => sum + product.tongSoLuong, 0));
    }


    // Ki·ªÉm tra canvas t·ªìn t·∫°i
    const canvas = document.getElementById('pieChart') as HTMLCanvasElement;
    if (!canvas) {
      console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ canvas cho bi·ªÉu ƒë·ªì tr√≤n.');
      return;
    }

    // X√≥a bi·ªÉu ƒë·ªì c≈© tr∆∞·ªõc khi v·∫Ω m·ªõi
    if (this.pieChart) {
      this.pieChart.destroy();
    }

    // V·∫Ω bi·ªÉu ƒë·ªì tr√≤n
    this.pieChart = new Chart(canvas.getContext('2d')!, {
      type: 'pie',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'Top s·∫£n ph·∫©m b√°n ch·∫°y',
            data: data,
            backgroundColor: ['#FF5733', '#33FF57', '#3357FF', '#FF33A8', '#FFD733', '#33FFF5'],
            borderColor: ['#C70039', '#28A745', '#1F3C88', '#C71585', '#E6B800', '#00CED1'],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            callbacks: {
              label: (tooltipItem) => {
                const label = tooltipItem.label || '';
                const value = tooltipItem.raw;
                return `${label}: ${value} s·∫£n ph·∫©m`;
              },
            },
          },
        },
      },
    });
  }
}
